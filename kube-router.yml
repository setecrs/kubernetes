apiVersion: v1
items:
- apiVersion: extensions/v1beta1
  kind: DaemonSet
  metadata:
    labels:
      k8s-app: kube-router
      tier: node
    name: kube-router
    namespace: kube-system
    selfLink: /apis/extensions/v1beta1/namespaces/kube-system/daemonsets/kube-router
    uid: 27c6e5bd-8091-11e8-9a44-1866dae77800
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-router
        tier: node
    template:
      metadata:
        annotations:
          scheduler.alpha.kubernetes.io/critical-pod: ""
        creationTimestamp: null
        labels:
          k8s-app: kube-router
          tier: node
      spec:
        containers:
        - args:
          - --run-router=true
          - --run-firewall=true
          - --run-service-proxy=true
          - --kubeconfig=/var/lib/kube-router/kubeconfig
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: cloudnativelabs/kube-router:v0.2.5
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 20244
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 1
          name: kube-router
          resources:
            requests:
              cpu: 250m
              memory: 250Mi
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /etc/cni/net.d
            name: cni-conf-dir
          - mountPath: /var/lib/kube-router
            name: kubeconfig
            readOnly: true
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - command:
          - /bin/sh
          - -c
          - set -e -x; if [ ! -f /etc/cni/net.d/10-kuberouter.conf ]; then TMP=/etc/cni/net.d/.tmp-kuberouter-cfg;
            cp /etc/kube-router/cni-conf.json ${TMP}; mv ${TMP} /etc/cni/net.d/10-kuberouter.conf;
            fi
          image: busybox
          imagePullPolicy: Always
          name: install-cni
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cni/net.d
            name: cni-conf-dir
          - mountPath: /etc/kube-router
            name: kube-router-cfg
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-router
        serviceAccountName: kube-router
        terminationGracePeriodSeconds: 30
        tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
        volumes:
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-conf-dir
        - configMap:
            defaultMode: 420
            name: kube-router-cfg
          name: kube-router-cfg
        - configMap:
            defaultMode: 420
            items:
            - key: kubeconfig.conf
              path: kubeconfig
            name: kube-proxy
          name: kubeconfig
    templateGeneration: 5
    updateStrategy:
      rollingUpdate:
        maxUnavailable: 1
      type: RollingUpdate
kind: List
metadata:
  resourceVersion: ""
  selfLink: ""
